
Exercício Triggers


 1. Crie uma trigger que quando alterada a senha do professor, crie um registro na tabela log informando que essa modificação aconteceu informando o nome do professor;

R = 

CREATE OR REPLACE FUNCTION fc_atualizar_log()
RETURNS TRIGGER AS $$
	BEGIN
		INSERT INTO log 
		(descricaolog ) VALUES ( 'Op. Atualização senha. Professor:' || new.nomeprofessor);
		RETURN NEW;
	END;
$$
LANGUAGE 'plpgsql';

CREATE TRIGGER log_trigger AFTER UPDATE OF senhaprofessor ON PROFESSOR
FOR EACH ROW
EXECUTE PROCEDURE fc_atualizar_log();


 2. Crie uma trigger que quando alterado o status do aluno, crie um registro na tabela log informando que essa modificação aconteceu informando o nome do aluno; 

R =
CREATE OR REPLACE FUNCTION fc_atualizar_statusaluno_log()
RETURNS TRIGGER AS $$
	BEGIN
		INSERT INTO log 
		( descricaolog ) VALUES ('Op. Atualização status. Aluno:' || new.nomealuno);
		RETURN NEW;
	END;
$$
LANGUAGE 'plpgsql';

CREATE TRIGGER log_status_trigger AFTER UPDATE OF statusaluno ON ALUNO
FOR EACH ROW
EXECUTE PROCEDURE fc_atualizar_statusaluno_log();

3. Crie uma trigger que quando for adicionado a uma turma, crie um registro na tabela log informando que essa adição aconteceu informando o nome da turma; 

R = 

CREATE OR REPLACE FUNCTION fc_insert_turma_log()
RETURNS TRIGGER AS $$
	BEGIN
		INSERT INTO log 
		( descricaolog ) VALUES ( 'Op. Inserção.Turma:'  || new.nometurma );
		RETURN NEW;
	END;
$$
LANGUAGE 'plpgsql';

CREATE TRIGGER log_trigger_turma AFTER INSERT  ON TURMA
FOR EACH ROW
EXECUTE PROCEDURE fc_insert_turma_log();


4. Crie uma trigger que quando uma nota for adicionada na tabela nota, crie um registro na tabela log informando a nota e o codaluno que recebeu a nota;

R = 

CREATE OR REPLACE FUNCTION fc_insert_nota_log()
RETURNS TRIGGER AS $$

	BEGIN
		INSERT INTO log 
		(descricaolog ) VALUES ('Op. Inserção.Nota1:' || new.nota1semestre || 'Nota2:' || new.nota2semestre  || 'NotaF:' || new.notafinal || 'Cód. Aluno:' || new.codaluno);
		RETURN NEW;
	END;
$$
LANGUAGE 'plpgsql';

CREATE TRIGGER log_trigger_nota AFTER INSERT  ON NOTA
FOR EACH ROW
EXECUTE PROCEDURE fc_insert_nota_log();


 5. Crie uma trigger que quando for adicionado algum aluno na tabela turma_aluno, adicione +1 aluno em quantidadealunos na tabela turma; 

R = 

CREATE OR REPLACE FUNCTION fc_add_turma()
RETURNS TRIGGER AS $$
	BEGIN 
		
		UPDATE TURMA SET quantidadealunos = (quantidadealunos + 1 ) WHERE codturma = new.codturma;
		RETURN NEW;
	END;
$$
LANGUAGE 'plpgsql';

CREATE TRIGGER add_turma_trigger AFTER INSERT ON TURMA_ALUNO
FOR EACH ROW
EXECUTE PROCEDURE fc_add_turma();


6. Crie uma trigger que quando for adicionado algum professor na tabela disciplina, adicione +1 disciplina em quantdisciplina na tabela professor; 

R =
 
CREATE OR REPLACE FUNCTION fc_add_professor()
RETURNS TRIGGER AS $$
	BEGIN 
		
		UPDATE PROFESSOR SET quantdisciplinas = (quantdisciplinas + 1 ) WHERE codprofessor = new.codprofessor;
		RETURN NEW;
	END;
$$
LANGUAGE 'plpgsql';

CREATE TRIGGER add_professor_trigger AFTER INSERT ON DISCIPLINA
FOR EACH ROW
EXECUTE PROCEDURE fc_add_professor();

7. Crie uma trigger que quando for adicionado ou alterado uma nota, altere o campo nota final segundo o padrão n1+n2/2; 

R=

CREATE OR REPLACE FUNCTION fc_nota()
RETURNS TRIGGER AS $$
	BEGIN 
		UPDATE NOTA SET notafinal = ((new.nota1semestre + new.nota2semestre)/2) WHERE codnota = new.codnota;
		RETURN NEW;
	END;
$$
LANGUAGE 'plpgsql';

CREATE  TRIGGER nota_trigger AFTER  INSERT OR UPDATE OF nota1semestre , nota2semestre ON NOTA
FOR EACH ROW  
EXECUTE PROCEDURE fc_nota();


8. Crie uma trigger que quando for adicionado a nota final do aluno, crie um registro na tabela log informando a disciplina, código do aluno e a nota final.

R =

CREATE OR REPLACE FUNCTION fc_nota_log()
RETURNS TRIGGER AS $$
	BEGIN 
		INSERT INTO log
		(descricaolog) VALUES ('Disciplina:' || new.coddisciplina || 'Aluno:' || new.codaluno || 'NotaF:' || new.notafinal);
		RETURN NEW;
	END;
$$
LANGUAGE 'plpgsql';

CREATE  TRIGGER nota_trigger_log AFTER INSERT OR UPDATE OF notafinal ON NOTA
FOR EACH ROW  
EXECUTE PROCEDURE fc_nota_log();
